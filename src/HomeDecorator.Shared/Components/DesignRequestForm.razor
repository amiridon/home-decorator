@namespace HomeDecorator.Shared.Components
@using HomeDecorator.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

<div class="design-form">
    <h3 class="mb-4">Create New Design</h3>
    <div class="form-group mb-3">
        <label for="imageUrl">Image URL or Upload</label>
        <div class="input-group">
            <input type="text" class="form-control" id="imageUrl" placeholder="Enter image URL" @bind="ImageUrl" />
        </div>
        <div class="mt-2">
            <InputFile OnChange="@OnFilesSelected" multiple accept="image/*" class="form-control" />
            <small class="form-text text-muted">Select one or more images (JPEG, PNG, WebP)</small>
        </div>
    </div>

    <div class="form-group mb-3">
        <label for="prompt">Design Prompt</label>
        <textarea class="form-control" id="prompt" rows="3"
            placeholder="Describe how you'd like to transform this space..." @bind="Prompt"></textarea>
    </div>

    @if (!string.IsNullOrEmpty(ImagePreviewUrl))
    {
        <div class="image-preview mb-4">
            <h5>Image Preview</h5>
            <img src="@ImagePreviewUrl" class="img-fluid" alt="Preview" />
        </div>
    }

    <div class="form-group mb-4">
        <button class="btn btn-primary" @onclick="HandleSubmit" disabled="@(!CanSubmit)">
            Generate Design
        </button>
    </div>

    @if (IsFakeModeEnabled)
    {
        <div class="fake-mode-indicator">
            <div class="alert alert-warning">
                <strong>⚠️ Fake Data Mode Active</strong>
                <p>Using mock services instead of real APIs</p>
            </div>
        </div>
    }
</div>

<style>
    .design-form {
        max-width: 700px;
        margin: 0 auto;
    }

    .image-preview {
        border-radius: 8px;
        overflow: hidden;
    }

    .image-preview img {
        max-height: 300px;
        width: 100%;
        object-fit: cover;
    }

    .fake-mode-indicator {
        margin-top: 20px;
    }
</style>

@code {
    [Parameter]
    public bool IsFakeModeEnabled { get; set; }

    [Parameter]
    public EventCallback<DesignRequest> OnSubmit { get; set; }

    private string ImageUrl { get; set; } = "";
    private string Prompt { get; set; } = "";
    private string ImagePreviewUrl { get; set; } = "";
    private List<IBrowserFile> SelectedFiles { get; set; } = new();

    private bool CanSubmit => !string.IsNullOrWhiteSpace(Prompt) &&
    (!string.IsNullOrWhiteSpace(ImagePreviewUrl) || SelectedFiles.Any());

    protected override void OnInitialized()
    {
        // Use placeholder image in fake mode
        if (IsFakeModeEnabled)
        {
            ImagePreviewUrl = "https://via.placeholder.com/400x300?text=Sample+Room";
            ImageUrl = ImagePreviewUrl;
        }
    }
    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        SelectedFiles.Clear();
        SelectedFiles.AddRange(e.GetMultipleFiles(10)); // Allow up to 10 files

        if (SelectedFiles.Any())
        {
            // Show preview of first selected file
            var firstFile = SelectedFiles.First();
            using var stream = firstFile.OpenReadStream(10 * 1024 * 1024); // 10MB limit
            var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var imageBytes = ms.ToArray();
            var base64 = Convert.ToBase64String(imageBytes);
            ImagePreviewUrl = $"data:{firstFile.ContentType};base64,{base64}";

            // Clear URL input since we're using file upload
            ImageUrl = "";

            StateHasChanged();
        }
    }

    private void OnUploadClick()
    {
        // Legacy method - kept for backward compatibility but now handled by InputFile
        if (IsFakeModeEnabled)
        {
            ImageUrl = "https://via.placeholder.com/400x300?text=Uploaded+Image";
            ImagePreviewUrl = ImageUrl;
        }
    }

    private async Task HandleSubmit()
    {
        if (!CanSubmit) return;

        var request = new DesignRequest
        {
            OriginalImageUrl = !string.IsNullOrWhiteSpace(ImageUrl) ? ImageUrl : "file-upload", // Placeholder for file uploads
            Prompt = Prompt,
            Status = "Pending"
        };

        await OnSubmit.InvokeAsync(request);
    }
}
